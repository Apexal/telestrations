{"version":3,"sources":["config.js","services/client.js","components/HiddenPanel.jsx","pages/home/components/PublicGameListing.jsx","pages/home/HomePage.jsx","pages/game/components/PlayerTag.jsx","pages/game/components/GameLobby.jsx","pages/game/components/CanvasDisplay.jsx","pages/game/components/SketchPad/SketchControlBar.jsx","pages/game/components/SketchPad/SketchPadRenderer.jsx","pages/game/components/GameRound.jsx","pages/game/components/GameOver.jsx","components/Error.jsx","pages/game/GamePage.jsx","services/color-effects.js","App.js","reportWebVitals.js","index.js"],"names":["config","minPlayers","serverURL","thickWidth","thinWidth","colors","client","colyseus","lobby","joinLobby","a","joinOrCreate","leaveLobby","removeAllListeners","leave","gameRoom","Error","create","joinGameRoom","roomId","joinById","window","localStorage","setItem","sessionId","lastRoomId","getItem","lastSessionId","reconnect","getGameRoom","leaveGameRoom","removeItem","HiddenPanel","this","props","visible","children","Component","PublicGameListing","onMessage","rooms","onSetPublicRooms","room","roomIndex","publicRooms","findIndex","map","r","index","filter","length","className","to","clients","maxClients","renderPublicGames","HomePage","state","showPublicGames","showPrivateGame","canReconnect","handleShowPublicGames","bind","handleHostGame","handleSetPublicRooms","handleJoinPrivateGame","handleReconnect","setState","privateRooms","hostGame","then","history","push","id","isHost","event","preventDefault","target","value","reconnectToGameRoom","isReconnecting","catch","err","alert","onClick","handleShowPrivateGame","onSubmit","name","type","placeholder","withRouter","PlayerTag","isPlayer","displayName","style","marginLeft","GameLobby","hostPlayerSessionId","players","maxPlayers","onChangeName","onStartGame","isPublic","onToggleRoomVisibility","playerCount","Object","keys","playerTags","playerSessionId","hostButton","disabled","CanvasDisplay","context","canvasRef","createRef","drawStroke","draw","stroke","ctx","beginPath","moveTo","fromX","fromY","lineTo","toX","toY","lineWidth","width","strokeStyle","color","lineCap","closePath","clearRect","current","clientWidth","clientHeight","i","setTimeout","drawingStrokes","getContext","prevProps","ref","height","SketchControlBar","isSubmitted","onClear","onUndo","SketchPadRenderer","currentX","currentY","colorIndex","strokes","clear","redraw","handleClear","handleUndo","handleReplay","onDownload","onMouseMove","onMouseClick","onMouseReleased","onTouchMove","onTouchStart","handleToggleWidth","handleCycleColor","addEventListener","posAX","posAY","posBX","posBY","Math","sqrt","pow","anyStrokes","t","prevStroke","prevPrevStroke","distance","samePos","splice","rect","getBoundingClientRect","x","clientX","left","right","y","clientY","top","bottom","pos","getMousePos","setCurrentPosition","stopPropagation","buttons","concat","onDrawingStrokesUpdate","optimizeStrokes","touch","touches","mouseEvent","MouseEvent","dispatchEvent","pop","replayTimeouts","image","canvas","toDataURL","replace","location","href","colorButtonStyle","backgroundColor","GameRound","handlePreviousDrawingGuessFormSubmit","onPreviousDrawingGuessUpdate","currentTarget","guess","trim","roundTimerSecondsRemaining","minutes","floor","seconds","sketchPad","roundIndex","secretWord","handleTimer","isDrawingStage","previousDrawingGuess","previousPlayerIndex","playerKeys","key","previousPlayerKey","previousPlayer","previousDrawingSubmission","submissions","find","sub","previousDrawingStrokes","required","GameOver","renderPlayerDrawingChain","player","divs","playerIndex","p","abs","submission","entries","title","rel","GamePage","isJoiningGame","isInGame","isStateLoaded","errorMessage","isGameOver","getGameRoomId","setupGameRoomEventListeners","handleChangeName","handleStartGame","handleDrawingStrokesUpdate","handlePreviousDrawingGuessUpdate","handleSubmit","handleToggleRoomVisibility","match","params","roomCode","getPlayer","onStateChange","once","onChange","changes","forEach","change","includes","field","onAdd","onRemove","newPlayers","assign","k","onLeave","code","onError","message","console","log","newDisplayName","prompt","send","callback","newPreviousDrawingGuess","error","renderGameComponent","configureBackgroundColors","cc","random","document","body","getColor","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cb272ed.chunk.js","sourcesContent":["const config = {\n  minPlayers: 1, // TODO: change in prod\n  serverURL: 'telestrations-server.herokuapp.com', // TODO: change in prod\n  thickWidth: 10,\n  thinWidth: 5,\n  colors: ['black', 'red', 'green', 'blue', 'yellow']\n}\n\nexport default config\n","import * as colyseus from 'colyseus.js'\nimport config from '../config'\n\nconst client = new colyseus.Client('ws://' + config.serverURL)\n\nlet lobby = null\n\n/**\n * Connects to the Lobby room and creates it if it doesn't exist.\n *\n * @returns {Promise<Room>} Connected lobby room\n * @throws Error if failed to create lobby room for any reason\n */\nexport async function joinLobby () {\n  if (lobby !== null) return lobby\n\n  lobby = await client.joinOrCreate('lobby')\n\n  return lobby\n}\n\n/**\n * Disconnect from the lobby.\n */\nexport function leaveLobby () {\n  if (lobby === null) return\n\n  lobby.removeAllListeners()\n  lobby.leave()\n  lobby = null\n}\n\nlet gameRoom = null\n\n/**\n * Creates a new game room and connects to it.\n *\n * @returns {Promise<Room>} Newly created and connected game room\n * @throws Error if failed to create room for any reason\n */\nexport async function hostGame () {\n  if (gameRoom !== null) throw Error('Game room is not null!')\n\n  leaveLobby()\n\n  gameRoom = await client.create('game_room')\n\n  return gameRoom\n}\n\n/**\n * Attempts to connect to game room identified by a room id.\n *\n * @param {string} roomId Unique identifier of game room, e.g. \"OEGHW\"\n * @returns {Promise<colyseus.Room>} Newly connected game room\n * @throws Error if game room doesn't exist or failed to connect\n */\nexport async function joinGameRoom (roomId) {\n  leaveLobby()\n\n  gameRoom = await client.joinById(roomId)\n\n  // Save room id for reconnects\n  window.localStorage.setItem('lastRoomId', roomId)\n  window.localStorage.setItem('lastSessionId', gameRoom.sessionId)\n\n  return gameRoom\n}\n\n/**\n * Attempt to reconnect to the last game room.\n */\nexport async function reconnectToGameRoom () {\n  const lastRoomId = window.localStorage.getItem('lastRoomId')\n  const lastSessionId = window.localStorage.getItem('lastSessionId')\n\n  gameRoom = await client.reconnect(lastRoomId, lastSessionId)\n\n  return gameRoom\n}\n\n/**\n * Return the currently connected game room or null if not connected.\n *\n * @returns {colyseus.Room} Currently connected game room\n */\nexport function getGameRoom () {\n  return gameRoom\n}\n\nexport function leaveGameRoom () {\n  if (gameRoom === null) return\n\n  window.localStorage.removeItem('lastRoomId')\n  window.localStorage.removeItem('lastSessionId')\n\n  gameRoom.removeAllListeners()\n  gameRoom.leave()\n  gameRoom = null\n}\n","import React, { Component } from 'react'\n\nexport default class HiddenPanel extends Component {\n  render () {\n    if (!this.props.visible) return <></>\n\n    return (\n      <div>\n        {this.props.children}\n      </div>\n    )\n  }\n}\n","import { Component } from 'react'\nimport { joinLobby, leaveLobby } from '../../../services/client'\nimport { Link } from 'react-router-dom'\n\nexport default class PublicGameListing extends Component {\n  async componentDidMount () {\n    const lobby = await joinLobby()\n\n    // The rooms event is from the built-in Colyseus lobby room\n    lobby.onMessage('rooms', rooms => {\n      this.props.onSetPublicRooms(rooms)\n    })\n\n    // The + event is from the built-in Colyseus lobby room\n    lobby.onMessage('+', ([roomId, room]) => {\n      const roomIndex = this.props.publicRooms.findIndex((room) => room.roomId === roomId)\n\n      if (roomIndex !== -1) {\n        // Update existing room\n        this.props.onSetPublicRooms(this.props.publicRooms.map((r, index) => (roomIndex === index) ? room : r))\n      } else {\n        // Add new room\n        this.props.onSetPublicRooms([room, ...this.props.publicRooms])\n      }\n    })\n\n    // The - event is from the built-in Colyseus lobby room\n    lobby.onMessage('-', (roomId) => {\n      this.props.onSetPublicRooms(this.props.publicRooms.filter(room => room.roomId !== roomId))\n    })\n  }\n\n  componentWillUnmount () {\n    leaveLobby()\n  }\n\n  renderPublicGames () {\n    if (this.props.publicRooms.length <= 0) { return <div className='center'><i>There are no open public rooms!</i></div> }\n\n    return this.props.publicRooms.map((room, roomIndex) => (\n      <div className='row' key={room.roomId}>\n        <Link to={'/' + room.roomId} className='button u-full-width'>\n          Game {room.roomId} <span className='u-pull-right'>({room.clients} / {room.maxClients})</span>\n        </Link>\n      </div>\n    ))\n  }\n\n  render () {\n    return (\n      <div className='panel'>\n        {this.renderPublicGames()}\n      </div>\n    )\n  }\n}\n","import { Component } from 'react'\nimport { hostGame, reconnectToGameRoom } from '../../services/client'\nimport { withRouter } from 'react-router'\n\nimport '../../styles/homepage.css'\nimport HiddenPanel from '../../components/HiddenPanel'\nimport PublicGameListing from './components/PublicGameListing'\n\nclass HomePage extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      showPublicGames: false,\n      showPrivateGame: false,\n      publicRooms: [],\n      canReconnect: window.localStorage.getItem('lastRoomId') !== null\n    }\n\n    this.handleShowPublicGames = this.handleShowPublicGames.bind(this)\n    this.handleHostGame = this.handleHostGame.bind(this)\n    this.handleSetPublicRooms = this.handleSetPublicRooms.bind(this)\n    this.handleJoinPrivateGame = this.handleJoinPrivateGame.bind(this)\n    this.handleReconnect = this.handleReconnect.bind(this)\n  }\n\n  handleShowPublicGames () {\n    this.setState({ showPublicGames: !this.state.showPublicGames })\n  }\n\n  handleSetPublicRooms (publicRooms) {\n    this.setState({\n      publicRooms\n    })\n  }\n\n  handleShowPrivateGame () {\n    this.setState({ showPrivateGame: !this.state.showPrivateGame })\n  }\n\n  handleSetPrivateRooms (privateRooms) {\n    this.setState({\n      privateRooms\n    })\n  }\n\n  handleHostGame () {\n    hostGame()\n      .then((room) => {\n        this.props.history.push('/' + room.id, { isHost: true })\n      })\n  }\n\n  // Simply navigate to game code url\n  handleJoinPrivateGame (event) {\n    event.preventDefault()\n\n    const roomId = event.target.roomId.value\n    this.props.history.push('/' + roomId)\n\n    event.target.roomId.value = ''\n  }\n\n  handleReconnect () {\n    reconnectToGameRoom()\n      .then((room) => {\n        this.props.history.push('/' + room.id, { isReconnecting: true })\n      })\n      .catch((err) => {\n        window.alert(err)\n        window.localStorage.removeItem('lastRoomId')\n        window.localStorage.removeItem('lastSessionId')\n\n        this.setState({\n          canReconnect: false\n        })\n      })\n  }\n\n  render () {\n    return (\n      <div>\n        <h1 className='title title-anim'>Telestrations</h1>\n\n        <div className='row'>\n          <button className='button u-full-width' onClick={this.handleHostGame}>\n            Host Game\n          </button>\n        </div>\n\n        <div className='row'>\n          <button className='button u-full-width' onClick={this.handleShowPublicGames}>\n            Join Public Game\n          </button>\n\n          <HiddenPanel visible={this.state.showPublicGames}>\n            <PublicGameListing publicRooms={this.state.publicRooms} onSetPublicRooms={this.handleSetPublicRooms} />\n          </HiddenPanel>\n        </div>\n\n        <div className='row'>\n          <button className='button u-full-width' onClick={this.handleShowPrivateGame}>\n            Join Private Game\n          </button>\n\n          <HiddenPanel visible={this.state.showPrivateGame}>\n            <form onSubmit={this.handleJoinPrivateGame}>\n              <input className='u-full-width input-view' name='roomId' type='text' placeholder='Code...' />\n            </form>\n          </HiddenPanel>\n\n          {this.state.canReconnect &&\n            <div className='row'>\n              <button className='button u-full-width' onClick={this.handleReconnect}>Reconnect</button>\n            </div>}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(HomePage)\n","import '../../../styles/player-tag.css'\n\n/*\n  PlayerTag is the item that represents each player when they join a game. For instance, it will show their name\n  and maybe a little information about them.\n*/\nexport default function PlayerTag ({ sessionId, isPlayer, isHost, displayName }) {\n  return (\n    <li key={sessionId}>\n      <div className='player-tag player-tag-add-anim'>\n        <span>\n          {isHost ? '👑' : ''} {displayName}\n        </span>\n        {isPlayer && <strong style={{ marginLeft: 5 }}>(You)</strong>}\n      </div>\n    </li>\n  )\n}\n","import { Link } from 'react-router-dom'\nimport config from '../../../config'\n\nimport PlayerTag from './PlayerTag'\n\nexport default function GameLobby ({\n  roomId,\n  sessionId,\n  hostPlayerSessionId,\n  players,\n  maxPlayers,\n  onChangeName,\n  onStartGame,\n  isPublic,\n  onToggleRoomVisibility\n}) {\n  const isHost = hostPlayerSessionId === sessionId\n\n  const playerCount = Object.keys(players).length\n\n  const playerTags = Object.keys(players).map((playerSessionId) => (\n    <PlayerTag\n      key={playerSessionId}\n      isPlayer={playerSessionId === sessionId}\n      isHost={hostPlayerSessionId === playerSessionId}\n      displayName={players[playerSessionId].displayName}\n    />\n  ))\n\n  const hostButton = playerCount < config.minPlayers\n    ? <button className='button' disabled>Waiting For Players</button>\n    : <button className='button' onClick={onStartGame}>Start Game</button>\n\n  return (\n    <div className='game-lobby'>\n      <div className='supertext center'>your room code is...</div>\n      <h1 className='title room-code-anim'>{roomId}</h1>\n\n      <h5>{playerCount} / {maxPlayers} players</h5>\n\n      <ul>\n        {playerTags}\n      </ul>\n\n      {isHost ? hostButton : <Link className='button' to='/'>Leave</Link>}\n      {isHost && <button className='button' onClick={onToggleRoomVisibility}>Make Room {isPublic ? 'Private' : 'Public'}</button>}\n      {players[sessionId] &&\n        <button className='button u-pull-right' onClick={onChangeName}>Change Name</button>}\n    </div>\n  )\n}\n","import { Component, createRef } from 'react'\n\n/**\n * Manages the drawing / exporting operations on top of the canvas object.\n */\n\nexport default class CanvasDisplay extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      context: null\n    }\n    this.canvasRef = createRef()\n\n    this.drawStroke = this.drawStroke.bind(this)\n    this.draw = this.draw.bind(this)\n  }\n\n  drawStroke (stroke) {\n    if (!stroke) return\n\n    const ctx = this.state.context\n\n    ctx.beginPath()\n    ctx.moveTo(stroke.fromX, stroke.fromY)\n    ctx.lineTo(stroke.toX, stroke.toY)\n    ctx.lineWidth = stroke.width\n    ctx.strokeStyle = stroke.color\n    ctx.lineCap = 'round'\n    ctx.stroke()\n    ctx.closePath()\n  }\n\n  draw () {\n    const ctx = this.state.context\n    ctx.clearRect(0, 0, this.canvasRef.current.clientWidth, this.canvasRef.current.clientHeight)\n    for (let i = 0; i < this.props.drawingStrokes.length; i++) {\n      window.setTimeout(() => (() => this.drawStroke(this.props.drawingStrokes[i]))(), 10 * i)\n    }\n  }\n\n  componentDidMount () {\n    this.setState({\n      context: this.canvasRef.current.getContext('2d')\n    }, this.draw)\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.drawingStrokes.length !== this.props.drawingStrokes.length) {\n      this.draw()\n    }\n  }\n\n  render () {\n    return (\n      <canvas id='canvas' ref={this.canvasRef} width='400' height='400'>\n        Sorry, your browser does not support canvas.\n      </canvas>\n    )\n  }\n}\n","export default function SketchControlBar ({ isSubmitted, onClear, onUndo, onSubmit }) {\n  return (\n    <div>\n      <button className='button button-bar' onClick={onClear} id='clear'>Clear</button>\n      <button className='button button-bar' id='undo' onClick={onUndo}>Undo</button>\n      {isSubmitted\n        ? <button className='button button-bar' id='submit' disabled>Waiting for Other Players</button>\n        : <button className='button button-bar' id='submit' onClick={onSubmit}>Submit</button>}\n      {/* <button id='replay' onClick={props.onReplay}>Replay</button>\n      <button id='download' onClick={props.onDownload}>Download</button> */}\n    </div>\n  )\n}\n","import { Component, createRef } from 'react'\nimport config from '../../../../config'\nimport SketchControlBar from './SketchControlBar'\n\n/**\n * Manages the drawing / exporting operations on top of the canvas object.\n */\nexport default class SketchPadRenderer extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      currentX: -1,\n      currentY: -1,\n      width: 5,\n      colorIndex: 0,\n      strokes: [],\n      context: null\n    }\n\n    this.canvasRef = createRef()\n\n    this.clear = this.clear.bind(this)\n    this.redraw = this.redraw.bind(this)\n    this.handleClear = this.handleClear.bind(this)\n    this.handleUndo = this.handleUndo.bind(this)\n    this.handleReplay = this.handleReplay.bind(this)\n    this.onDownload = this.onDownload.bind(this)\n    this.drawStroke = this.drawStroke.bind(this)\n    this.onMouseMove = this.onMouseMove.bind(this)\n    this.onMouseClick = this.onMouseClick.bind(this)\n    this.onMouseReleased = this.onMouseReleased.bind(this)\n    this.onTouchMove = this.onTouchMove.bind(this)\n    this.onTouchStart = this.onTouchStart.bind(this)\n    this.handleToggleWidth = this.handleToggleWidth.bind(this)\n    this.handleCycleColor = this.handleCycleColor.bind(this)\n  }\n\n  componentDidMount () {\n    this.setState({\n      context: this.canvasRef.current.getContext('2d')\n    })\n\n    this.canvasRef.current.addEventListener('mousedown', this.onMouseClick)\n    this.canvasRef.current.addEventListener('mouseup', this.onMouseReleased)\n    this.canvasRef.current.addEventListener('mousemove', this.onMouseMove)\n    this.canvasRef.current.addEventListener('touchmove', this.onTouchMove)\n    this.canvasRef.current.addEventListener('touchstart', this.onTouchStart)\n  }\n\n  drawStroke (stroke) {\n    const ctx = this.state.context\n\n    ctx.beginPath()\n    ctx.moveTo(stroke.fromX, stroke.fromY)\n    ctx.lineTo(stroke.toX, stroke.toY)\n    ctx.lineWidth = stroke.width\n    ctx.strokeStyle = stroke.color\n    ctx.lineCap = 'round'\n    ctx.stroke()\n    ctx.closePath()\n  }\n\n  clear () {\n    const ctx = this.state.context\n    ctx.clearRect(0, 0, this.canvasRef.current.clientWidth, this.canvasRef.current.clientHeight)\n  }\n\n  redraw () {\n    this.clear()\n\n    for (const stroke of this.props.drawingStrokes) {\n      this.drawStroke(stroke)\n    }\n  }\n\n  distance (posAX, posAY, posBX, posBY) {\n    return Math.sqrt(Math.pow(posAX - posBX, 2) + Math.pow(posAY - posBY, 2))\n  }\n\n  samePos (posAX, posAY, posBX, posBY) {\n    return posAX === posBX && posAY === posBY\n  }\n\n  optimizeStrokes (anyStrokes) {\n    for (let t = 0; t <= 2; t++) {\n      for (let i = 2; i < anyStrokes.length; i++) {\n        const stroke = anyStrokes[i]\n        const prevStroke = anyStrokes[i - 1]\n        const prevPrevStroke = anyStrokes[i - 2]\n\n        if (this.distance(prevStroke.fromX, prevStroke.fromY, stroke.fromX, stroke.fromY) <= 5 && this.samePos(prevPrevStroke.toX, prevPrevStroke.toY, prevStroke.fromX, prevStroke.fromY)) {\n          anyStrokes.splice(i - 1, 1)\n          prevPrevStroke.toX = stroke.fromX\n          prevPrevStroke.toY = stroke.fromY\n        }\n      }\n    }\n  }\n\n  getMousePos (event) {\n    const rect = this.canvasRef.current.getBoundingClientRect()\n    return {\n      x: (event.clientX - rect.left) / (rect.right - rect.left) * this.canvasRef.current.width,\n      y: (event.clientY - rect.top) / (rect.bottom - rect.top) * this.canvasRef.current.height\n    }\n  }\n\n  setCurrentPosition (x, y) {\n    this.setState({ currentX: x, currentY: y })\n  }\n\n  onMouseClick (event) {\n    const pos = this.getMousePos(event)\n    this.setCurrentPosition(pos.x, pos.y)\n  }\n\n  onMouseMove (event) {\n    event.preventDefault()\n    event.stopPropagation()\n    if (event.buttons !== 1 || this.props.isSubmitted) return\n\n    const to = this.getMousePos(event)\n\n    const stroke = {\n      fromX: this.state.currentX === -1 ? to.x : this.state.currentX,\n      fromY: this.state.currentY === -1 ? to.y : this.state.currentY,\n      toX: to.x,\n      toY: to.y,\n      width: this.state.width,\n      color: config.colors[this.state.colorIndex]\n    }\n\n    const strokes = this.props.drawingStrokes.concat(stroke)\n    this.props.onDrawingStrokesUpdate(strokes)\n\n    this.drawStroke(stroke)\n    this.setCurrentPosition(to.x, to.y)\n  }\n\n  onMouseReleased () {\n    const strokes = [...this.props.drawingStrokes]\n    this.optimizeStrokes(strokes)\n    this.props.onDrawingStrokesUpdate(strokes)\n    this.redraw()\n  }\n\n  onTouchMove (event) {\n    event.preventDefault()\n\n    const touch = event.touches[0]\n    const mouseEvent = new window.MouseEvent('mousemove', {\n      clientX: touch.clientX,\n      clientY: touch.clientY,\n      buttons: 1\n    })\n    this.canvasRef.current.dispatchEvent(mouseEvent)\n  }\n\n  onTouchStart (event) {\n    event.preventDefault()\n\n    const pos = this.getMousePos(event.touches[0])\n    this.setCurrentPosition(pos.x, pos.y)\n  }\n\n  handleToggleWidth () {\n    this.setState({\n      width: this.state.width === config.thinWidth ? config.thickWidth : config.thinWidth\n    })\n  }\n\n  handleCycleColor () {\n    this.setState({\n      colorIndex: (this.state.colorIndex + 1) % config.colors.length\n    })\n  }\n\n  handleClear () {\n    this.clear()\n    this.props.onDrawingStrokesUpdate([])\n  }\n\n  handleUndo () {\n    if (this.props.drawingStrokes.length === 0) { return }\n\n    const strokes = this.props.drawingStrokes\n    for (let i = 0; i < 5; i++) {\n      strokes.pop()\n    }\n\n    this.props.onDrawingStrokesUpdate(strokes, this.redraw)\n  }\n\n  handleReplay () {\n    this.clear()\n    const replayTimeouts = []\n\n    for (let i = 0; i < this.props.drawingStrokes.length; i++) {\n      replayTimeouts.push(setTimeout(() => this.drawStroke(this.props.drawingStrokes[i]), 10 * i))\n    }\n  }\n\n  onDownload () {\n    const image = this.state.context.canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream')\n    window.location.href = image\n  }\n\n  render () {\n    const colorButtonStyle = {\n      width: this.state.width * 2,\n      height: this.state.width * 2,\n      backgroundColor: config.colors[this.state.colorIndex]\n    }\n\n    return (\n      <div>\n        <div>\n          <button className='button' onClick={this.handleToggleWidth}>{this.state.width === config.thickWidth ? <strong className='thick-stroke'>Thick</strong> : 'Thin'} Stroke</button>\n          <button className='button' onClick={this.handleCycleColor}><div className='color-preview' style={colorButtonStyle} /></button>\n        </div>\n        <canvas id='canvas' ref={this.canvasRef} width='400' height='400'>\n          Sorry, your browser does not support canvas.\n        </canvas>\n        <SketchControlBar\n          isSubmitted={this.props.isSubmitted}\n          onClear={this.handleClear}\n          onUndo={this.handleUndo}\n          onSubmit={this.props.onSubmit}\n          // onReplay={this.handleReplay}\n          // onDownload={this.onDownload}\n        />\n      </div>\n    )\n  }\n}\n","import { Component } from 'react'\nimport CanvasDisplay from './CanvasDisplay'\nimport SketchPadRenderer from './SketchPad/SketchPadRenderer'\n\nexport default class GameRound extends Component {\n  constructor (props) {\n    super(props)\n\n    this.handlePreviousDrawingGuessFormSubmit = this.handlePreviousDrawingGuessFormSubmit.bind(this)\n  }\n\n  handlePreviousDrawingGuessFormSubmit (event) {\n    event.preventDefault()\n    this.props.onPreviousDrawingGuessUpdate(event.currentTarget.guess.value.trim())\n  }\n\n  handleTimer (roundTimerSecondsRemaining) {\n    const minutes = Math.floor(roundTimerSecondsRemaining / 60)\n    const seconds = roundTimerSecondsRemaining - (minutes * 60)\n\n    if (minutes > 0) {\n      return <span><b>{minutes}</b> minute{minutes === 1 ? '' : 's'}, <b>{seconds}</b> second{seconds === 1 ? '' : 's'}</span>\n    } else {\n      return <span><b>{seconds}</b> second{seconds === 1 ? '' : 's'}</span>\n    }\n  }\n\n  render () {\n    const sketchPad = (\n      <SketchPadRenderer\n        isSubmitted={this.props.isSubmitted}\n        drawingStrokes={this.props.drawingStrokes}\n        onDrawingStrokesUpdate={this.props.onDrawingStrokesUpdate}\n        onSubmit={this.props.onSubmit}\n      />\n    )\n\n    if (this.props.roundIndex === 1) {\n      return (\n        <div className='center'>\n          <h4>Your word to draw is...</h4>\n          <h1 className='title scale-in secret-word'>{this.props.secretWord}</h1>\n          <p className='timer'>⏰ {this.handleTimer(this.props.roundTimerSecondsRemaining)} remaining</p>\n          {sketchPad}\n        </div>\n      )\n    } else if (this.props.isDrawingStage) {\n      return (\n        <div className='center'>\n          <h1 className='title'>Draw - Round {this.props.roundIndex}</h1>\n          <p className='timer'>⏰ {this.handleTimer(this.props.roundTimerSecondsRemaining)} remaining</p>\n\n          <div>\n            You guessed <strong className='fancy'>{this.props.previousDrawingGuess}</strong>.\n            Now draw your own sketch of it!\n          </div>\n\n          {sketchPad}\n        </div>\n      )\n    } else {\n      const currentPlayerIndex = this.props.playerKeys.findIndex(key => key === this.props.sessionId)\n      const previousPlayerIndex = (currentPlayerIndex + 1) % this.props.playerKeys.length\n      const previousPlayerKey = this.props.playerKeys[previousPlayerIndex]\n      const previousPlayer = this.props.players[previousPlayerKey]\n      const previousDrawingSubmission = previousPlayer.submissions.find(sub => sub.roundIndex === this.props.roundIndex - 1)\n\n      // In the event that a disconnected player hasn't had their submission made yet\n      if (!previousDrawingSubmission) {\n        return (\n          <div className='center'>\n            <h1>Collecting player drawings...</h1>\n          </div>\n        )\n      }\n\n      const previousDrawingStrokes = previousDrawingSubmission.drawingStrokes\n\n      return (\n        <div className='center'>\n          <h1>Guess - Round {this.props.roundIndex}</h1>\n          <p className='timer'>⏰ {this.handleTimer(this.props.roundTimerSecondsRemaining)} remaining</p>\n          <div>\n            <b>{previousPlayer.displayName} just drew this... masterpiece.</b>\n            <br />\n            <CanvasDisplay drawingStrokes={previousDrawingStrokes} />\n          </div>\n          <form onSubmit={this.handlePreviousDrawingGuessFormSubmit}>\n            <span>Guess what it is below!</span>\n            <div>\n              <input className='center' type='text' placeholder='What is this a drawing of?' name='guess' required />\n            </div>\n          </form>\n        </div>\n      )\n    }\n  }\n}\n","import { Link } from 'react-router-dom'\nimport CanvasDisplay from './CanvasDisplay'\n\nexport default function GameOver (props) {\n  const renderPlayerDrawingChain = (sessionId, player) => {\n    const divs = []\n    const playerIndex = props.playerKeys.findIndex(p => p === sessionId)\n    for (let roundIndex = 1; roundIndex <= props.playerKeys.length + (props.playerKeys.length % 2); roundIndex++) {\n      let i = playerIndex - roundIndex + 1\n      if (i < 0) {\n        i = props.playerKeys.length - Math.abs(i)\n      }\n\n      const player = props.players[props.playerKeys[i]]\n      const submission = player.submissions.find(sub => sub.roundIndex === roundIndex)\n      divs.push(\n        <div className='submission' key={playerIndex + '-' + roundIndex}>\n          {roundIndex === 1\n            ? <p>And they first drew...</p>\n            : <p>Then, <strong>{player.displayName}</strong> guessed and drew...</p>}\n          <CanvasDisplay\n            drawingStrokes={submission.drawingStrokes}\n          />\n          <h2 className='title label'>{submission.previousDrawingGuess}</h2>\n        </div>\n      )\n    }\n    return <div>{divs}</div>\n  }\n\n  return (\n    <div className='game-lobby'>\n      <h1 className='title room-code-anim'>Game Over</h1>\n      <h3 className='fancy center'>Check out the crazy drawing chains!</h3>\n\n      {Object.entries(props.players).map(([key, player]) => (\n        <div className='drawing-chain' key={key}>\n          <details>\n            <summary><strong>{player.displayName}</strong>'s secret word was <span className='title'>{player.secretWord}</span></summary>\n            {renderPlayerDrawingChain(key, player)}\n          </details>\n        </div>\n      ))}\n\n      <Link className='button' to='/'>Home</Link>\n    </div>\n  )\n}\n","import { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class Error extends Component {\n  render () {\n    return (\n      <div className=''>\n        <h1>{this.props.title}</h1>\n        {this.props.children}\n        <Link className='button' to='/'>Home</Link>\n        <a href='https://github.com/Apexal/telestrations/issues/new' target='_blank' rel='noreferrer' className='button'>Report Bug</a>\n      </div>\n    )\n  }\n}\n","import { Component } from 'react'\nimport { withRouter } from 'react-router'\nimport GameLobby from './components/GameLobby'\nimport GameRound from './components/GameRound'\nimport GameOver from './components/GameOver'\n\nimport { getGameRoom, joinGameRoom, leaveGameRoom } from '../../services/client'\n\nimport '../../styles/game.css'\nimport Error from '../../components/Error'\n\n/**\n * Wrapper component class for entire game.\n */\nclass GamePage extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      sessionId: '',\n      roomId: '',\n      isJoiningGame: true,\n      isInGame: false,\n      isStateLoaded: false,\n      hostPlayerSessionId: '',\n      errorMessage: null,\n      maxPlayers: 1,\n      players: {},\n      playerKeys: [],\n      roundIndex: 0,\n      roundTimerSecondsRemaining: 0,\n      previousDrawingGuess: '',\n      drawingStrokes: [],\n      isDrawingStage: false,\n      isGameOver: false,\n      isPublic: true\n    }\n\n    this.getGameRoomId = this.getGameRoomId.bind(this)\n    this.setupGameRoomEventListeners = this.setupGameRoomEventListeners.bind(this)\n    this.handleChangeName = this.handleChangeName.bind(this)\n    this.handleStartGame = this.handleStartGame.bind(this)\n    this.handleDrawingStrokesUpdate = this.handleDrawingStrokesUpdate.bind(this)\n    this.handlePreviousDrawingGuessUpdate = this.handlePreviousDrawingGuessUpdate.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleToggleRoomVisibility = this.handleToggleRoomVisibility.bind(this)\n  }\n\n  getGameRoomId () {\n    return this.props.match.params.roomCode\n  }\n\n  getPlayer () {\n    return this.state.players[this.state.sessionId]\n  }\n\n  isSubmitted () {\n    return !!this.getPlayer().submissions.find(sub => sub.roundIndex === this.state.roundIndex)\n  }\n\n  setupGameRoomEventListeners () {\n    const room = getGameRoom()\n\n    room.onMessage('error', window.alert)\n\n    room.onMessage('send-submissions', this.handleSubmit)\n\n    room.onMessage('round-end', () => {\n      this.setState({\n        drawingStrokes: [],\n        previousDrawingGuess: '',\n        isDrawingStage: false\n      })\n    })\n\n    room.onStateChange.once((state) => {\n      this.setState({\n        isStateLoaded: true\n      })\n    })\n\n    room.state.onChange = (changes) => {\n      changes.forEach(change => {\n        if (['hostPlayerSessionId', 'maxPlayers', 'roundIndex', 'isGameOver', 'roundTimerSecondsRemaining', 'isPublic'].includes(change.field)) {\n          this.setState({ [change.field]: change.value })\n        }\n      })\n    }\n\n    room.state.players.onAdd = (player, key) => {\n      this.setState((state) => ({\n        players: { ...state.players, [key]: player },\n        playerKeys: [...state.playerKeys, key]\n      }))\n\n      player.onChange = (changes) => {\n        this.setState((state) => ({\n          players: { ...state.players, [key]: player }\n        }))\n      }\n    }\n\n    room.state.players.onRemove = (player, key) => {\n      const newPlayers = Object.assign({}, this.state.players)\n      delete newPlayers[key]\n      this.setState({\n        players: newPlayers,\n        playerKeys: this.state.playerKeys.filter(k => k !== key)\n      })\n    }\n\n    room.onLeave((code) => {\n      window.alert('Lost connection to the game room...')\n      leaveGameRoom()\n      this.props.history.push('/')\n    })\n\n    room.onError((code, message) => {\n      console.log(code, message)\n      window.alert(code, message)\n    })\n  }\n\n  handleChangeName () {\n    const newDisplayName = window.prompt('New name?')\n\n    const room = getGameRoom()\n    room.send('player_set_displayName', { displayName: newDisplayName })\n  }\n\n  handleStartGame () {\n    const room = getGameRoom()\n    room.send('start_game')\n  }\n\n  handleDrawingStrokesUpdate (drawingStrokes, callback) {\n    if (this.isSubmitted()) return\n\n    this.setState({ drawingStrokes }, callback)\n  }\n\n  handlePreviousDrawingGuessUpdate (newPreviousDrawingGuess) {\n    this.setState({\n      previousDrawingGuess: newPreviousDrawingGuess,\n      isDrawingStage: true\n    })\n  }\n\n  handleSubmit () {\n    const room = getGameRoom()\n    room.send('player_submit_submission', {\n      roundIndex: this.state.roundIndex,\n      previousDrawingGuess: this.state.previousDrawingGuess,\n      drawingStrokes: this.state.drawingStrokes\n    })\n  }\n\n  handleToggleRoomVisibility () {\n    const room = getGameRoom()\n    room.send('set_room_visibility', { isPublic: !this.state.isPublic })\n  }\n\n  async componentDidMount () {\n    const roomId = this.getGameRoomId()\n\n    this.setState({ roomId })\n\n    // There are two possibilities at this point\n    // 1. The player clicked host game and has already created and joined a game room\n    //    - game room already is already joined\n    // 2. The player clicked on a game link, typed in the code, or click a link to the game room\n    //    - game room must be joined at this point\n\n    if (this.props.location.state && (this.props.location.state.isHost || this.props.location.state.isReconnecting)) {\n      const room = getGameRoom()\n      if (room === null) {\n        // Refreshed page! game is dead\n        this.setState({\n          sessionId: '',\n          isJoiningGame: false,\n          isInGame: false,\n          errorMessage: 'Failed to find or join game room!'\n        })\n      } else {\n        this.setState({\n          sessionId: room.sessionId,\n          isInGame: true,\n          isJoiningGame: false,\n          isHost: room.sessionId === room.state.hostPlayerSessionId,\n          errorMessage: null\n        }, this.setupGameRoomEventListeners)\n      }\n    } else {\n      try {\n        const room = await joinGameRoom(roomId)\n\n        this.setState({\n          sessionId: room.sessionId,\n          isJoiningGame: false,\n          isInGame: true,\n          isHost: false,\n          errorMessage: null\n        }, this.setupGameRoomEventListeners)\n      } catch (e) {\n        console.error(e)\n        this.setState({\n          sessionId: '',\n          isJoiningGame: false,\n          isInGame: false,\n          errorMessage: 'Failed to find or join game room!'\n        })\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    leaveGameRoom()\n  }\n\n  renderGameComponent () {\n    if (this.state.isInGame) {\n      if (this.state.roundIndex === 0) {\n        return (\n          <GameLobby\n            roomId={this.state.roomId}\n            isPublic={this.state.isPublic}\n            sessionId={this.state.sessionId}\n            hostPlayerSessionId={this.state.hostPlayerSessionId}\n            players={this.state.players}\n            maxPlayers={this.state.maxPlayers}\n            onDrawingStrokesUpdate={this.handleDrawingStrokesUpdate}\n            onChangeName={this.handleChangeName}\n            onStartGame={this.handleStartGame}\n            onToggleRoomVisibility={this.handleToggleRoomVisibility}\n          />\n        )\n      } else if (this.state.isGameOver) {\n        return (\n          <GameOver\n            playerKeys={this.state.playerKeys}\n            players={this.state.players}\n          />\n        )\n      } else if (this.state.roundIndex > 0) {\n        return (\n          <GameRound\n            isSubmitted={this.isSubmitted()}\n            secretWord={this.getPlayer().secretWord}\n            onSubmit={this.handleSubmit}\n            onDrawingStrokesUpdate={this.handleDrawingStrokesUpdate}\n            onPreviousDrawingGuessUpdate={this.handlePreviousDrawingGuessUpdate}\n            {...this.state}\n          />\n        )\n      }\n    }\n  }\n\n  render () {\n    return (\n      <div>\n        {this.state.isJoiningGame && (\n          <div>\n            Joining game room...\n          </div>\n        )}\n        {this.state.isInGame && this.state.isStateLoaded && this.renderGameComponent()}\n        {this.state.errorMessage &&\n          <Error title='An Error Occurred'>\n            <p>{this.state.errorMessage}</p>\n          </Error>}\n      </div>\n    )\n  }\n}\n\nexport default withRouter(GamePage)\n","/*\n  Manages the color of the game's background.\n*/\n\n/* Generate color as array */\nconst getColorCombo = () => {\n  return [360 * Math.random(), 50 + 50 * Math.random(), 80 + 15 * Math.random()]\n}\n\n/* Generate CSS color based off of array */\nconst getColor = (cc) => {\n  return 'hsl(' + cc[0] + ',' +\n  cc[1] + '%,' +\n  cc[2] + '%)'\n}\n\nexport default function configureBackgroundColors () {\n  const cc = getColorCombo()\n  document.body.style.backgroundColor = getColor(cc)\n};\n","// import logo from './logo.svg'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n  // Link\n} from 'react-router-dom'\n\nimport './App.css'\nimport HomePage from './pages/home/HomePage'\nimport GamePage from './pages/game/GamePage'\nimport configureBackgroundColors from './services/color-effects'\n\nfunction App () {\n  configureBackgroundColors()\n\n  return (\n    <div className='App container'>\n      <Router>\n        <Switch>\n          <Route path='/' exact>\n            <HomePage />\n          </Route>\n          <Route path='/:roomCode'>\n            <GamePage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/normalize.css'\nimport './styles/skeleton.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport './services/client'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}